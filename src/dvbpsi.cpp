/*****************************************************************************
 * vlc_psi.cpp : threads implementation for the VideoLAN client
 * This header provides portable declarations for mutexes & conditions
 *****************************************************************************
 * Copyright (C) 1999, 2002 VLC authors and VideoLAN
 * Copyright © 2007-2008 Rémi Denis-Courmont
 *
 * Authors: Jean-Marc Dressler <polux@via.ecp.fr>
 *          Samuel Hocevar <sam@via.ecp.fr>
 *          Gildas Bazin <gbazin@netcourrier.com>
 *          Christophe Massiot <massiot@via.ecp.fr>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
 *****************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <assert.h>
#include <string.h>
#include "dvbpsi.h"


/*****************************************************************************
 * dvbpsi_crc32_table
 *****************************************************************************
 * This table is used to compute a PSI CRC byte per byte instead of bit per
 * bit. It's been generated by 'gen_crc' in the 'misc' directory:
 *
 *   uint32_t table[256];
 *   uint32_t i, j, k;
 *
 *   for(i = 0; i < 256; i++)
 *   {
 *     k = 0;
 *     for (j = (i << 24) | 0x800000; j != 0x80000000; j <<= 1)
 *       k = (k << 1) ^ (((k ^ j) & 0x80000000) ? 0x04c11db7 : 0);
 *     table[i] = k;
 *   }
 *
 * A CRC is computed like this:
 *
 *   initialization
 *   --------------
 *   uint32_t i_crc = 0xffffffff;
 *
 *   for each data byte do
 *   ---------------------
 *   i_crc = (i_crc << 8) ^ dvbpsi_crc32_table[(i_crc >> 24) ^ (data_byte)];
 *****************************************************************************/
static uint32_t dvbpsi_crc32_table[256] =
{
  0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9,
  0x130476dc, 0x17c56b6b, 0x1a864db2, 0x1e475005,
  0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61,
  0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd,
  0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9,
  0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,
  0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011,
  0x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd,
  0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039,
  0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5,
  0xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81,
  0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,
  0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49,
  0xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95,
  0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1,
  0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d,
  0x34867077, 0x30476dc0, 0x3d044b19, 0x39c556ae,
  0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,
  0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16,
  0x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca,
  0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde,
  0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02,
  0x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066,
  0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,
  0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e,
  0xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692,
  0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6,
  0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a,
  0xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e,
  0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,
  0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686,
  0xd5b88683, 0xd1799b34, 0xdc3abded, 0xd8fba05a,
  0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637,
  0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb,
  0x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f,
  0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,
  0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47,
  0x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b,
  0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff,
  0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623,
  0xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7,
  0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,
  0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f,
  0xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3,
  0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7,
  0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b,
  0x9b3660c6, 0x9ff77d71, 0x92b45ba8, 0x9675461f,
  0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,
  0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640,
  0x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c,
  0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8,
  0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24,
  0x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30,
  0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,
  0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088,
  0x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654,
  0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0,
  0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c,
  0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18,
  0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,
  0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0,
  0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,
  0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,
  0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
};

static bool dvbpsi_has_CRC32(dvbpsi_psi_section_t *p_section)
{
    if ((p_section->i_table_id == (uint8_t) 0x70) /* TDT (has no CRC 32) */ ||
        (p_section->i_table_id == (uint8_t) 0x71) /* RST (has no CRC 32) */ ||
        (p_section->i_table_id == (uint8_t) 0x72) /*  ST (has no CRC 32) */ ||
        (p_section->i_table_id == (uint8_t) 0x7E))/* DIT (has no CRC 32) */
        return false;

    return (p_section->b_syntax_indicator || (p_section->i_table_id == 0x73));
}

dvbpsi_psi_section_t *dvbpsi_NewPSISection(int i_max_size)
{
    /* Allocate the dvbpsi_psi_section_t structure */
    dvbpsi_psi_section_t * p_section
                  = (dvbpsi_psi_section_t*)calloc(1, sizeof(dvbpsi_psi_section_t));
    if (p_section == NULL)
        return NULL;

    /* Allocate the p_data memory area */
    p_section->p_data = (uint8_t*)calloc(1, i_max_size * sizeof(uint8_t));
    if (p_section->p_data == NULL)
    {
        free(p_section);
        return NULL;
    }

    p_section->p_payload_end = p_section->p_data;
    p_section->p_next = NULL;

    return p_section;
}

/*****************************************************************************
 * dvbpsi_DeletePSISections
 *****************************************************************************
 * Destruction of a dvbpsi_psi_section_t structure.
 *****************************************************************************/
void dvbpsi_DeletePSISections(dvbpsi_psi_section_t *p_section)
{
    while(p_section != NULL)
    {
        dvbpsi_psi_section_t* p_next = p_section->p_next;

        if (p_section->p_data != NULL)
            free(p_section->p_data);

        free(p_section);
        p_section = p_next;
    }
    p_section = NULL;
}

bool dvbpsi_ValidPSISection(dvbpsi_psi_section_t* p_section)
{
    uint32_t i_crc = 0xffffffff;
    uint8_t* p_byte = p_section->p_data;

    while(p_byte < p_section->p_payload_end + 4)
    {
        i_crc = (i_crc << 8) ^ dvbpsi_crc32_table[(i_crc >> 24) ^ (*p_byte)];
        p_byte++;
    }

    if (i_crc == 0)
        return true;
    else
        return false;
}

/*****************************************************************************
 * dvbpsi_CalculateCRC32
 *****************************************************************************
 * Calculate the CRC32 for this section
 *****************************************************************************/
void dvbpsi_CalculateCRC32(dvbpsi_psi_section_t *p_section)
{
    uint8_t* p_byte = p_section->p_data;
    p_section->i_crc = 0xffffffff;

    while (p_byte < p_section->p_payload_end)
    {
        p_section->i_crc =   (p_section->i_crc << 8)
                           ^ dvbpsi_crc32_table[(p_section->i_crc >> 24) ^ (*p_byte)];
        p_byte++;
    }

    p_section->p_payload_end[0] = (p_section->i_crc >> 24) & 0xff;
    p_section->p_payload_end[1] = (p_section->i_crc >> 16) & 0xff;
    p_section->p_payload_end[2] = (p_section->i_crc >> 8) & 0xff;
    p_section->p_payload_end[3] = p_section->i_crc & 0xff;
}

/*****************************************************************************
 * dvbpsi_BuildPSISection
 *****************************************************************************
 * Build the section based on the information in the structure.
 *****************************************************************************/
void dvbpsi_BuildPSISection(dvbpsi_psi_section_t* p_section)
{
    /* table_id */
    p_section->p_data[0] = p_section->i_table_id;
    /* setion_syntax_indicator | private_indicator |
       first 4 MSB of section_length */
    p_section->p_data[1] =   (p_section->b_syntax_indicator ? 0x80 : 0x00)
                           | (p_section->b_private_indicator ? 0x40 : 0x00)
                           | 0x30 /* reserved bits set to 1 */
                           | ((p_section->i_length >> 8) & 0x0f);
    /* 8 LSB of section_length */
    p_section->p_data[2] = p_section->i_length & 0xff;

    /* Optional part of a PSI section */
    if (p_section->b_syntax_indicator)
    {
        /* 8 MSB of table_id_extension */
        p_section->p_data[3] = (p_section->i_extension >> 8) & 0xff;
        /* 8 LSB of table_id_extension */
        p_section->p_data[4] = p_section->i_extension & 0xff;
        /* 5 bits of version_number | current_next_indicator */
        p_section->p_data[5] =   0xc0 /* reserved bits set to 1 */
                               | ((p_section->i_version & 0x1f) << 1)
                               | (p_section->b_current_next ? 0x01 : 0x00);
        /* section_number */
        p_section->p_data[6] = p_section->i_number;
        /* last_section_number */
        p_section->p_data[7] = p_section->i_last_number;

    }

    if (dvbpsi_has_CRC32(p_section))
    {
        dvbpsi_CalculateCRC32(p_section);

        if (!dvbpsi_ValidPSISection(p_section))
        {
            printf("******************************************** \n");
            printf("* Generated PSI section has a bad CRC_32.  * \n");
            printf("* THIS IS A BUG, PLEASE REPORT TO THE LIST * \n");
            printf("*  ---  libdvbpsi-devel@videolan.org  ---  *\n");
            printf("******************************************** \n");
        }
    }
}


/*****************************************************************************
 * dvbpsi_pat_init
 *****************************************************************************
 * Initialize a pre-allocated dvbpsi_pat_t structure.
 *****************************************************************************/
void dvbpsi_pat_init(dvbpsi_pat_t* p_pat, uint16_t i_ts_id, uint8_t i_version,
                    bool b_current_next)
{
    assert(p_pat);

    p_pat->i_ts_id = i_ts_id;
    p_pat->i_version = i_version;
    p_pat->b_current_next = b_current_next;
    p_pat->p_first_program = NULL;
}

/*****************************************************************************
 * dvbpsi_pat_empty
 *****************************************************************************
 * Clean a dvbpsi_pat_t structure.
 *****************************************************************************/
void dvbpsi_pat_empty(dvbpsi_pat_t* p_pat)
{
    dvbpsi_pat_program_t* p_program = p_pat->p_first_program;

    while(p_program != NULL)
    {
        dvbpsi_pat_program_t* p_tmp = p_program->p_next;
        free(p_program);
        p_program = p_tmp;
    }
    p_pat->p_first_program = NULL;
}

/*****************************************************************************
 * dvbpsi_pat_program_add
 *****************************************************************************
 * Add a program at the end of the PAT.
 *****************************************************************************/
dvbpsi_pat_program_t* dvbpsi_pat_program_add(dvbpsi_pat_t* p_pat,uint16_t i_number, uint16_t i_pid)
{
    dvbpsi_pat_program_t* p_program;

    /* PID = 0 is invalid for programs
     * FIXME: check for other fixed PIDs too. */
    if (i_pid == 0)
        return NULL;

    p_program = (dvbpsi_pat_program_t*) malloc(sizeof(dvbpsi_pat_program_t));
    if (p_program == NULL)
        return NULL;

    p_program->i_number = i_number;
    p_program->i_pid = i_pid;
    p_program->p_next = NULL;

    if (p_pat->p_first_program == NULL)
        p_pat->p_first_program = p_program;
    else
    {
        dvbpsi_pat_program_t* p_last_program = p_pat->p_first_program;
        while (p_last_program->p_next != NULL)
            p_last_program = p_last_program->p_next;
        p_last_program->p_next = p_program;
    }

    return p_program;
}

dvbpsi_psi_section_t* dvbpsi_pat_sections_generate(dvbpsi_pat_t* p_pat, int i_max_pps)
{
    dvbpsi_psi_section_t* p_result = dvbpsi_NewPSISection(1024);
    dvbpsi_psi_section_t* p_current = p_result;
    dvbpsi_psi_section_t* p_prev;
    dvbpsi_pat_program_t* p_program = p_pat->p_first_program;
    int i_count = 0;

    if (p_current == NULL)
    {
        printf("PAT encoder", "failed to allocate new PSI section \n");
        return NULL;
    }

    /* A PAT section can carry up to 253 programs */
    if((i_max_pps <= 0) || (i_max_pps > 253))
        i_max_pps = 253;

    p_current->i_table_id = 0;
    p_current->b_syntax_indicator = true;
    p_current->b_private_indicator = false;
    p_current->i_length = 9;                      /* header + CRC_32 */
    p_current->i_extension = p_pat->i_ts_id;
    p_current->i_version = p_pat->i_version;
    p_current->b_current_next = p_pat->b_current_next;
    p_current->i_number = 0;
    p_current->p_payload_end += 8;                /* just after the header */
    p_current->p_payload_start = p_current->p_payload_end;

    /* PAT programs */
    while (p_program != NULL)
    {
        /* New section if needed */
        if (++i_count > i_max_pps)
        {
            p_prev = p_current;
            p_current = dvbpsi_NewPSISection(1024);
            if (p_current ==  NULL)
            {
                printf("failed to allocate new PSI section \n");
                goto error;
            }
            p_prev->p_next = p_current;
            i_count = 1;

            p_current->i_table_id = 0;
            p_current->b_syntax_indicator = true;
            p_current->b_private_indicator = false;
            p_current->i_length = 9;                  /* header + CRC_32 */
            p_current->i_extension = p_pat->i_ts_id;
            p_current->i_version = p_pat->i_version;
            p_current->b_current_next = p_pat->b_current_next;
            p_current->i_number = p_prev->i_number + 1;
            p_current->p_payload_end += 8;            /* just after the header */
            p_current->p_payload_start = p_current->p_payload_end;
        }

        /* p_payload_end is where the program begins */
        p_current->p_payload_end[0] = p_program->i_number >> 8;
        p_current->p_payload_end[1] = p_program->i_number;
        p_current->p_payload_end[2] = (p_program->i_pid >> 8) | 0xe0;
        p_current->p_payload_end[3] = p_program->i_pid;

        /* Increase length by 4 */
        p_current->p_payload_end += 4;
        p_current->i_length += 4;

        p_program = p_program->p_next;
    }

    /* Finalization */
    p_prev = p_result;
    while (p_prev != NULL)
    {
        p_prev->i_last_number = p_current->i_number;
        dvbpsi_BuildPSISection(p_prev);
        p_prev = p_prev->p_next;
    }

    return p_result;

error:
    /* Cleanup on error */
    p_prev = p_result;
    dvbpsi_DeletePSISections(p_prev);
    return NULL;
}


dvbpsi_descriptor_t* dvbpsi_NewDescriptor(uint8_t i_tag, uint8_t i_length,
                                          uint8_t* p_data)
{
    dvbpsi_descriptor_t* p_descriptor
                = (dvbpsi_descriptor_t*)malloc(sizeof(dvbpsi_descriptor_t));

    if (p_descriptor == NULL)
        return NULL;

    p_descriptor->p_data = (uint8_t*)malloc(i_length * sizeof(uint8_t));
    if (p_descriptor->p_data)
    {
        p_descriptor->i_tag = i_tag;
        p_descriptor->i_length = i_length;
        if (p_data)
            memcpy(p_descriptor->p_data, p_data, i_length);
        p_descriptor->p_decoded = NULL;
        p_descriptor->p_next = NULL;
    }
    else
    {
        free(p_descriptor);
        p_descriptor = NULL;
    }

    return p_descriptor;
}

/*****************************************************************************
 * dvbpsi_AddDescriptor
 *****************************************************************************
 * Add 'p_descriptor' to the list of descriptors 'p_list'
 *****************************************************************************/
dvbpsi_descriptor_t *dvbpsi_AddDescriptor(dvbpsi_descriptor_t *p_list,
                                          dvbpsi_descriptor_t *p_descriptor)
{
    assert(p_descriptor);

    if (p_list == NULL)
        p_list = p_descriptor;
    else
    {
        dvbpsi_descriptor_t *p_last = p_list;
        while (p_last->p_next != NULL)
                p_last = p_last->p_next;
        p_last->p_next = p_descriptor;
    }
    return p_list;
}

/*****************************************************************************
 * dvbpsi_DeleteDescriptors
 *****************************************************************************
 * Destruction of a dvbpsi_descriptor_t structure.
 *****************************************************************************/
void dvbpsi_DeleteDescriptors(dvbpsi_descriptor_t* p_descriptor)
{
    while(p_descriptor != NULL)
    {
        dvbpsi_descriptor_t* p_next = p_descriptor->p_next;

        if (p_descriptor->p_data != NULL)
            free(p_descriptor->p_data);

        if (p_descriptor->p_decoded != NULL)
            free(p_descriptor->p_decoded);

        free(p_descriptor);
        p_descriptor = p_next;
    }
}


/*****************************************************************************
 * dvbpsi_pmt_init
 *****************************************************************************
 * Initialize a pre-allocated dvbpsi_pmt_t structure.
 *****************************************************************************/
void dvbpsi_pmt_init(dvbpsi_pmt_t* p_pmt, uint16_t i_program_number,
                    uint8_t i_version, bool b_current_next, uint16_t i_pcr_pid)
{
    assert(p_pmt);

    p_pmt->i_program_number = i_program_number;
    p_pmt->i_version = i_version;
    p_pmt->b_current_next = b_current_next;
    p_pmt->i_pcr_pid = i_pcr_pid;
    p_pmt->p_first_descriptor = NULL;
    p_pmt->p_first_es = NULL;
}

/*****************************************************************************
 * dvbpsi_pmt_empty
 *****************************************************************************
 * Clean a dvbpsi_pmt_t structure.
 *****************************************************************************/
void dvbpsi_pmt_empty(dvbpsi_pmt_t* p_pmt)
{
    dvbpsi_pmt_es_t* p_es = p_pmt->p_first_es;

    dvbpsi_DeleteDescriptors(p_pmt->p_first_descriptor);

    while(p_es != NULL)
    {
        dvbpsi_pmt_es_t* p_tmp = p_es->p_next;
        dvbpsi_DeleteDescriptors(p_es->p_first_descriptor);
        free(p_es);
        p_es = p_tmp;
    }

    p_pmt->p_first_descriptor = NULL;
    p_pmt->p_first_es = NULL;
}

/*****************************************************************************
 * dvbpsi_pmt_descriptor_add
 *****************************************************************************
 * Add a descriptor in the PMT.
 *****************************************************************************/
dvbpsi_descriptor_t* dvbpsi_pmt_descriptor_add(dvbpsi_pmt_t* p_pmt,
                                               uint8_t i_tag, uint8_t i_length,
                                               uint8_t* p_data)
{
    dvbpsi_descriptor_t* p_descriptor;
    p_descriptor = dvbpsi_NewDescriptor(i_tag, i_length, p_data);
    if (p_descriptor == NULL)
        return NULL;

    p_pmt->p_first_descriptor = dvbpsi_AddDescriptor(p_pmt->p_first_descriptor,
                                                     p_descriptor);
    assert(p_pmt->p_first_descriptor);
    if (p_pmt->p_first_descriptor == NULL)
        return NULL;

    return p_descriptor;
}

/*****************************************************************************
 * dvbpsi_pmt_es_add
 *****************************************************************************
 * Add an ES in the PMT.
 *****************************************************************************/
dvbpsi_pmt_es_t* dvbpsi_pmt_es_add(dvbpsi_pmt_t* p_pmt,
                                   uint8_t i_type, uint16_t i_pid)
{
    dvbpsi_pmt_es_t* p_es = (dvbpsi_pmt_es_t*)malloc(sizeof(dvbpsi_pmt_es_t));
    if (p_es == NULL)
        return NULL;

    p_es->i_type = i_type;
    p_es->i_pid = i_pid;
    p_es->p_first_descriptor = NULL;
    p_es->p_next = NULL;

    if (p_pmt->p_first_es == NULL)
       p_pmt->p_first_es = p_es;
    else
    {
        dvbpsi_pmt_es_t* p_last_es = p_pmt->p_first_es;
        while (p_last_es->p_next != NULL)
            p_last_es = p_last_es->p_next;
        p_last_es->p_next = p_es;
    }
    return p_es;
}

/*****************************************************************************
 * dvbpsi_pmt_es_descriptor_add
 *****************************************************************************
 * Add a descriptor in the PMT ES.
 *****************************************************************************/
dvbpsi_descriptor_t* dvbpsi_pmt_es_descriptor_add(dvbpsi_pmt_es_t* p_es,
                                               uint8_t i_tag, uint8_t i_length,
                                               uint8_t* p_data)
{
    dvbpsi_descriptor_t* p_descriptor;
    p_descriptor = dvbpsi_NewDescriptor(i_tag, i_length, p_data);
    if (p_descriptor == NULL)
        return NULL;

    if (p_es->p_first_descriptor == NULL)
        p_es->p_first_descriptor = p_descriptor;
    else
    {
        dvbpsi_descriptor_t* p_last_descriptor = p_es->p_first_descriptor;
        while(p_last_descriptor->p_next != NULL)
            p_last_descriptor = p_last_descriptor->p_next;
        p_last_descriptor->p_next = p_descriptor;
    }
    return p_descriptor;
}

/*****************************************************************************
 * dvbpsi_pmt_sections_generate
 *****************************************************************************
 * Generate PMT sections based on the dvbpsi_pmt_t structure.
 *****************************************************************************/
dvbpsi_psi_section_t* dvbpsi_pmt_sections_generate(dvbpsi_pmt_t* p_pmt)
{
    dvbpsi_psi_section_t* p_result = dvbpsi_NewPSISection(1024);
    dvbpsi_psi_section_t* p_current = p_result;
    dvbpsi_psi_section_t* p_prev;
    dvbpsi_descriptor_t* p_descriptor = p_pmt->p_first_descriptor;
    dvbpsi_pmt_es_t* p_es = p_pmt->p_first_es;
    uint16_t i_info_length;

    p_current->i_table_id = 0x02;
    p_current->b_syntax_indicator = true;
    p_current->b_private_indicator = false;
    p_current->i_length = 13;                     /* header + CRC_32 */
    p_current->i_extension = p_pmt->i_program_number;
    p_current->i_version = p_pmt->i_version;
    p_current->b_current_next = p_pmt->b_current_next;
    p_current->i_number = 0;
    p_current->p_payload_end += 12;               /* just after the header */
    p_current->p_payload_start = p_current->p_data + 8;

    /* PCR_PID */
    p_current->p_data[8] = (p_pmt->i_pcr_pid >> 8) | 0xe0;
    p_current->p_data[9] = p_pmt->i_pcr_pid;

    /* PMT descriptors */
    while (p_descriptor != NULL)
    {
        /* New section if needed */
        /* written_data_length + descriptor_length + 2 > 1024 - CRC_32_length */
        if ((p_current->p_payload_end - p_current->p_data)
                                      + p_descriptor->i_length > 1018)
        {
            /* program_info_length */
            i_info_length = (p_current->p_payload_end - p_current->p_data) - 12;
            p_current->p_data[10] = (i_info_length >> 8) | 0xf0;
            p_current->p_data[11] = i_info_length;

            p_prev = p_current;
            p_current = dvbpsi_NewPSISection(1024);
            p_prev->p_next = p_current;

            p_current->i_table_id = 0x02;
            p_current->b_syntax_indicator = true;
            p_current->b_private_indicator = false;
            p_current->i_length = 13;                 /* header + CRC_32 */
            p_current->i_extension = p_pmt->i_program_number;
            p_current->i_version = p_pmt->i_version;
            p_current->b_current_next = p_pmt->b_current_next;
            p_current->i_number = p_prev->i_number + 1;
            p_current->p_payload_end += 12;           /* just after the header */
            p_current->p_payload_start = p_current->p_data + 8;

            /* PCR_PID */
            p_current->p_data[8] = (p_pmt->i_pcr_pid >> 8) | 0xe0;
            p_current->p_data[9] = p_pmt->i_pcr_pid;
        }

        /* p_payload_end is where the descriptor begins */
        p_current->p_payload_end[0] = p_descriptor->i_tag;
        p_current->p_payload_end[1] = p_descriptor->i_length;
        memcpy(p_current->p_payload_end + 2,
                p_descriptor->p_data,
                p_descriptor->i_length);

        /* Increase length by descriptor_length + 2 */
        p_current->p_payload_end += p_descriptor->i_length + 2;
        p_current->i_length += p_descriptor->i_length + 2;

        p_descriptor = p_descriptor->p_next;
    }

    /* program_info_length */
    i_info_length = (p_current->p_payload_end - p_current->p_data) - 12;
    p_current->p_data[10] = (i_info_length >> 8) | 0xf0;
    p_current->p_data[11] = i_info_length;

    /* PMT ESs */
    while (p_es != NULL)
    {
        uint8_t* p_es_start = p_current->p_payload_end;
        uint16_t i_es_length = 5;

        /* Can the current section carry all the descriptors ? */
        p_descriptor = p_es->p_first_descriptor;
        while(    (p_descriptor != NULL)
               && ((p_es_start - p_current->p_data) + i_es_length <= 1020))
        {
            i_es_length += p_descriptor->i_length + 2;
            p_descriptor = p_descriptor->p_next;
        }

        /* If _no_ and the current section isn't empty and an empty section
           may carry one more descriptor
           then create a new section */
        if(    (p_descriptor != NULL)
            && (p_es_start - p_current->p_data != 12)
            && (i_es_length <= 1008))
        {
            /* will put more descriptors in an empty section */
            printf("create a new section to carry more ES descriptors \n");

            p_prev = p_current;
            p_current = dvbpsi_NewPSISection(1024);
            p_prev->p_next = p_current;

            p_current->i_table_id = 0x02;
            p_current->b_syntax_indicator = true;
            p_current->b_private_indicator = false;
            p_current->i_length = 13;                 /* header + CRC_32 */
            p_current->i_extension = p_pmt->i_program_number;
            p_current->i_version = p_pmt->i_version;
            p_current->b_current_next = p_pmt->b_current_next;
            p_current->i_number = p_prev->i_number + 1;
            p_current->p_payload_end += 12;           /* just after the header */
            p_current->p_payload_start = p_current->p_data + 8;

            /* PCR_PID */
            p_current->p_data[8] = (p_pmt->i_pcr_pid >> 8) | 0xe0;
            p_current->p_data[9] = p_pmt->i_pcr_pid;

            /* program_info_length */
            i_info_length = 0;
            p_current->p_data[10] = 0xf0;
            p_current->p_data[11] = 0x00;

            p_es_start = p_current->p_payload_end;
        }

        /* p_es_start is where the ES begins */
        p_es_start[0] = p_es->i_type;
        p_es_start[1] = (p_es->i_pid >> 8) | 0xe0;
        p_es_start[2] = p_es->i_pid;

        /* Increase the length by 5 */
        p_current->p_payload_end += 5;
        p_current->i_length += 5;

        /* ES descriptors */
        p_descriptor = p_es->p_first_descriptor;
        while(    (p_descriptor != NULL)
               && (   (p_current->p_payload_end - p_current->p_data)
                    + p_descriptor->i_length <= 1018))
        {
            /* p_payload_end is where the descriptor begins */
            p_current->p_payload_end[0] = p_descriptor->i_tag;
            p_current->p_payload_end[1] = p_descriptor->i_length;
            memcpy(p_current->p_payload_end + 2,
                   p_descriptor->p_data,
                   p_descriptor->i_length);

            /* Increase length by descriptor_length + 2 */
            p_current->p_payload_end += p_descriptor->i_length + 2;
            p_current->i_length += p_descriptor->i_length + 2;

            p_descriptor = p_descriptor->p_next;
        }

        if (p_descriptor != NULL)
            printf("PMT generator", "unable to carry all the ES descriptors \n");

        /* ES_info_length */
        i_es_length = p_current->p_payload_end - p_es_start - 5;
        p_es_start[3] = (i_es_length >> 8) | 0xf0;
        p_es_start[4] = i_es_length;

        p_es = p_es->p_next;
    }

    /* Finalization */
    p_prev = p_result;
    while (p_prev != NULL)
    {
        p_prev->i_last_number = p_current->i_number;
        dvbpsi_BuildPSISection(p_prev);
        p_prev = p_prev->p_next;
    }

    return p_result;
}


